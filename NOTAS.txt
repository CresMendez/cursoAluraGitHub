es necesario informar quien eres , esto se hace al iniciar si es que no lo tiene.

git config --local user.name "Tu nombre aquí"(local solo para este repositorio)  tambien se puede poner --global user... (para todos los proyectos que se haran)
git config --local user.email "Tu@email.aqui”

git init  = ¡Opción correcta! git init inicializa un repositorio en el directorio donde se ejecuta el comando. Desde este comando, Git podrá administrar los cambios realizados en los archivos.
git status = para ver el estatus del repositorio
git add . o index =  lo usas para empezar a rastrear archivos nuevos, preparar archivos, y hacer otras cosas como marcar archivos en conflicto por combinación como resueltos. para que empiece a monitorear los cambios 
git commit -m "comentario" =Se hace guarda los combios realizados y un comentario del cambio o lo que se haya creado"
		al hacer algun cambio en nuestro index se pone comenado git add .   luego se guarda con el comando git commit -m ""
git log = muestra el hash, head branch(rama) y el historial de cambios.
clear = limpiar pantalla.
git log --oneline = muestra el historial por lineas
git log -p = para ver la modificacion de los archivos, es decir el codigo fuente de los cambios hechos
:q = para salir del historico
pagina para ver mas filtros de gistoricos  devhints.io/git-log-format
git log --help y ve algunas de las posibles opciones. Para obtener algunos ejemplos más fáciles de entender  https://devhints.io/git-log.
-------
se hace commit cada que el proyecto funciona bien o se corrgie un bug
para ignorar archivos se crea un archivo .gitingnore y dentro se pone los nombres de los archivos a ignorar -> carpeta/ a.config
-------
Deberíamos generar un commit siempre que nuestra base de código esté en un estado que nos gustaría recordar. Nunca deberíamos tener commits de código que no funcionen, pero tampoco es interesante dejar el commit solo al final de una función.
-------
repositorios remotos pero local en mi pc
se crea carpeta con nombre servidor "servidor"
en termimnal poner 
git init --bare 
initialized empty git repository in C:/Users/cmend/Desktop/CAPACITACION ALURA LATAM/GIT Y GITHUB/servidor/ (si hay espacio poner una diagonal invertida ej: git\ y\ git\ hub).
git remote add servidor local  C:/Users/cmend/Desktop/CAPACITACION ALURA LATAM/GIT Y GITHUB/servidor/   = agegando servidor remoto local
git remote  = para ver si hay un servidor local
git remote -v = para ver si esta apuntando correctamente al servidor local(tiene que aparecer fetch=obtener file y push=enviar files)

---------------------
para clonar un priyecto
git clone  /c/Users/cmend/Desktop/CAPACITACION\ ALURA\ LATAM/GIT\ Y\ GITHUB/servidor/ proyecto   (proyecto es el nombre que tendra)

para enviar nuestro proyecto al servidor local 
git push servidorlocal master

	luego el usuario ana tiene que descargar el proyecto desde el servidor pero antes cambiar el nombre de origin
git remote rename origin servidorlocal

	validamos
git remote	nos muestra = servidorlocal

git pull servidorlocal master   = para descargar el proyecto creo desde el servidor 

al modificar la copia del index.html de ana hay que volver a guardarlo y confirmarlo 

git add index.html

luego confirmamos con

git commit -m "renombrando curso de integracion continua"

ahora se sube al servidor con el comando

$ git push servidorlocal master      con los cambio que hizo ana

volvemos a la carpeta principal de bruno 

cd.. 

y descargamos desde el serveer nuevamente los archivos con el cambio hecho por ana

git pull servidorlocal master
salir 
:Q
----------------------------
github
--------------------------
git remote add origin https://github.com/CresMendez/cursoAluraGitHub.git   = copiamos la url que nos da github y la usamos en git bash para subir los archivos

(no usar gir brache -m main por el momento, seguira con la rama de master)

git push -u origin master   = para mandar forzar el envio a nuetro repositorio de github
-------------------------------
branches       GIT-SCHOOL.GITHUB.IO/VISUALIZING-GIT
-------------------------------
git branch = para ver que branch (rama) estamos, el * indica en donde estamos

git branch nombreRama = para crear una nueva rama

git checkout nombreRama = para cambiarnos de rama

estando en la rama titulo hacemos modificaciones en el index.html y agrgamos add y confirmamos con commit

revisando con git log , vemos con los cambios se hicieron en la rama  titulo

en el titulo puedo ver los commit de master ya desde ahi parti 

en proyecto de ANA---------------------
creamos nueva Rama y nos movemos a ella con el comando:
git checkout -b lista   = la b es para crear y movernos al mismo tiempo a esa rama.

modificamos index.html 
git add .
hacmeos git commit
revisamos con git log que los cambios se hayan hecho solo en la rama lista
listo
Para eliminar una rama de nuestro repositorio local ejecutaremos el siguiente comando:
$ git branch -d nombre_rama
----------------------
hay que fusionar o mandar los cambios de la rama titulo a la rama master , al igual que de ana, lista a rama master.
UNIENDO EL TRABAJO (MERGE)
----------------------

Estando en la rama principal master
git merge titulo  = para fusionar rama master con rama titulo, unira lo que se hizo en titulo con lo que se hizo en master
revisamos con 
git log y vemos el merge titulo.
---------------------------------
actualizando la branch (git rebase) = (fusiona el trabajo como merge) mantiene el commit antes de master , en un solo camino , es algo semilar a merge. cual es mejor merge o rebase https://medium.com/datadriveninvestor/git-rebase-vs-merge-cc5199edd77c.
----------------------------------
git log --graph , para ver el historio de otra forma mas detalle , caminos donde se ha llevado los cambios
hacemos modificaciones en la rama titulo y volvemos a la rama master para unir con el comando 

git rebase titulo

luego nos vamos a la carpeta ANA y descargamos todos los cambios que hizo bruno con el comando 
git pull servidorlocal master.

luego nos vamos a rama lista
git checkout lista
modificamos la lista de nuestro index y guardamos 
revisamos con
git log -p  =para ver que cambios hubo
EN BRUNO SE MODIFICO ESA MISMA LINEA Y CON ANA SE MODIFICO ESA MISMA LINEA TMB , QUE PASA SI SE QUIERE UNIR ESA LINEA?

------------------------------------------------------
resolviendo conflictos 
-----------------------------------------------------
al colocar el comando en rama master 
git merge lista
marca error auto mergi conflic, es decir hay un conflicto, se corrgi eliminado el codigo desde visaul code, dejar solo una liena de amabas de las que se repite 
eliminamos y guardamos

ejecutamos un 
git estatus y nos dice que 2 archvios han sido modifcados
both modified: index.html

ahora guardamos el cambio con el comando git add
git add .
cmend@DESKTOP-L01L4IF MINGW64 ~/Desktop/CAPACITACION ALURA LATAM/GIT Y GITHUB/ana/proyecto (master|MERGING)
$ git add index.html

luego un git commit     = sin el mensaje de -m "".  LISTO SE CORRIGIO EL ERROR DEL CONFLICTO

podremos ya enviar a nuestro servidor local
git push servidorlocal master

ahora en el archvio de  bruno 
modifico una lista vangrant 
git status
git add .  = para guardar los cambios 
git commit -m "corrigiendo curso de vangrant" = confirmamos
git push servidorlocal master  = lo enviamos a nuestro servidor local pero este nos MARCA ERRORR! ESTO POR QUR NO TENEMOS LA VERSION MAS ACTUAL , HAY QUE BAJARLA CON EL COMANDO:
git pull servidorlocal master
ya que tengamos la version mas actual , revisamos que este todos los cambio que se bajaron y el del nuestro  
con git status revisamos que este todo en tode y la mandamos a nuestro servidor local 
git push servidorlocal master
y en carpeta ana igual vamos la version mas actual con el comando 
git pull servidorlocal master.


----------------------------------------------------------
ctrl +z En Git.
--------------------------------------------------------
para regresar a un punto anteriro antes que se le haya agregado el git add .
con git restore nombredelArchivo se puede restaurar.
git restore nombredelArchivo 

si ya se aplicaco el comando git add .
se usa comando git restore --staged nombreArhivo     = para quitar ese comando git add .
y luego git restore nombreArhivo    =para restaruar o deshacer el cambio aplicado.

si ya se aplico el comando git add y commiteado (git commit -m "")
entonces nos vamos a log (historial) para sacar el hash es decir el codgigo del cambio.
git log 
luego copiamos el hash ctrl+ c
git revert codigoHash    = para deshacer el cambio o volver al condigo antes aplicado.

git tash  = para guardarlo temporal , trabajo en progreso
para continuar con el trabajo usar el comando:
git stash list    = lista de todos los stash que tengo
git stash apply 0   = el cero es el numero de lista que quiero mandar a llmar, que es el trabajo temporarl que garde hace rato.

git stash pop = hace un merge con los cambio que ya teniamos y con los que estaba en hash, es mejor usar este que el codigo de arriba.sta
---------------------------------------------
viajando en el tiempo
-------------------------------------------
para viajar o regresar a otro punto de nuestro codgio , ejecutar 

git checkout numeroHash de 7 digitos  (para obtener ese codigo se usa =git log --oneline )

cuando estemos ahi podemos revisar y todo , no afectar al codigo principal pero si se quiere guardar los cambios con el trabajo acttual , hay que hacer una nueva 
rama branch 
git checkout -b nuevabranch  , esto se hace cuando estemos en ese codgio anteriro que queremos unir.
para volver al principo o de la ultima modificacion o el actual codigo se usa.
git checkout master

Que el comando git stash drop <número> elimina un elemento determinado del stash;
ue Git puede ayudarnos a deshacer cambios que no vamos a utilizar;
Que, para deshacer un cambio antes de agregarlo para commit(con git add), podemos usar el comando git restore <archivos>;
Que, para deshacer un cambio después de agregarlo paracommit, primero debemos ejecutar git restore --staged <archivos> y luego podemos deshacerlos con git restore <files>;
Que, para revertir los cambios realizados en un commit, el comando git revert puede ser la solución;
Que el comando git revert genera un nuevo commit informando que los cambios fueron deshechos;
Que, para guardar un trabajo y reanudarlo más tarde, podemos usar git stash;
Que, para ver qué cambios hay en el stash, podemos usar el comando git stash list;
Que, con el comando git stash apply <número>, podemos aplicar un cambio específico al stash;
Que el comando git stash drop <número> elimina un elemento determinado del stash;
Que el comando git stash pop aplica y elimina el último cambio que se agregó alstash;
Que git checkout sirve para dejar la copia del código de nuestra aplicación en el estado que queremos:
git checkout <branch> deja el código en el estado de una branchcon el nombre <branch>;
git checkout <hash> deja el código en el estado de commit con el hash <hash>.
----------------------------------------------

viendo las modificaciones	= podmeos ver todas las modificaciones 
---------------------------------------------
por ejemplo ver la lista con la version actual se usa el comando , 


git diff numero Hash..numeroHashActual   =  el 2 puntos significas hasa donde lo quermeos comparar.


git diff   = muestra solo los cambios que no se han agregados (git add .) para ver que cambios habiamos hecho por si salimos a comer.


--------------------------------------------------------------
Tags y Releases   = Generando versiones 
--------------------------------------------------------
git log -n 2 = muestra los ultimos 2 comits

para poder generar una version de un comit se usa el siguiente codigo , primero nos vamos a log y selecionamos el comiit que queremos agregarle la verison

es para regresar a ese punto tal cual estaba.
entonces ya que tengamos el hash con el codigo de arriba usamos en siguiente comando.

$ git tag -a v0.1.0 -m "lanzando la primera version (Beta) de la aplicacion de cursos"


git remote -v  = podemos ver todos los servidorres















































	



--------------------------------------------------
manipulando versiones

Ha llegado el momento de que pongas en práctica lo visto en clase. Para hacer esto, sigue los pasos que se enumeran a continuación.

1) En la carpeta que está tu proyecto, realiza cualquier cambio en el archivo index.html;

2) Ejecuta git status y va que hay un cambio para agregar;

3) Ejecuta el comando git checkout - index.html. Verifica si tu cambio se ha deshecho;

4) Nuevamente, realiza algunos cambios en el archivo index.html;

5) Ejecuta el comando git add index.html;

6) Ejecuta el comando git reset HEAD index.html para devolver el archivo index.html al HEAD del proyecto (elimínalo del stage, que es lo que será enviado para el commit);

7) Repite el paso 3;

8) Vuelve a realizar un cambio en el código;

9) Ejecuta el comando git add index.html y el comando git commit -m "Cambiando el código" para realizar un commit;

10) Ejecuta el comando git log y copia el hash de este commit recién creado;

11) Ejecuta el comando git revert {hash}, reemplazando {hash} con el hash que copiaste anteriormente;

12) Verifica que tus cambios se hayan deshecho;

13) Cambia el nombre del curso de Ansible a "Ansible: Infraestructura como código";

14) Ejecuta el comando git stash para guardar estos cambios en el stash;

15) Cambia el nombre del curso de Kubernetes a "Kubernetes: Introducción a la orquestación de containers";

16) Ejecuta el comando git add index.html y el comando git commit -m "Cambiar el nombre del curso de Kubernetes" para realizar un commit;

17) Ejecuta el comando git stash pop para que aparezca el último cambio en el stash;

18) Ejecuta el comando git add index.html y el comando git commit -m "Cambiar el nombre del curso Ansible" para realizar un commit;

19) Ejecuta el comando git push servidorlocal master para enviar todos tus cambios;

20) Ejecuta el comando git log --oneline para ver los commits de forma resumida. Copia el hash del commit de merge con la branch lista;

21) Ejecuta el comando git checkout {hash} reemplazando {hash} con el hash que copiaste;

22) Ve que varios cambios ya no están más presentes;

23) Ejecuta git checkout master para volver a la línea de desarrollo principal.





 




------------------------------04 conflictos 
Ha llegado el momento de que pongas en práctica lo visto en clase. Para hacer esto, sigue los pasos que se enumeran a continuación.

1) Ejecute el comando git branch y ve que solo existe la rama master en tu repositorio;

2) Ejecuta el comando git branch titulo e inmediatamente después ejecuta el comando git branch. Ve que se creó una nueva rama;

3) Ahora, para comenzar a trabajar en esta rama, escribe git checkout titulo;

4) Ejecuta git branch nuevamente y verifica que ahora te encuentras en la rama llamada titulo;

5) Cambia el título de la página index.html a "Cursos de DevOps de Alura";

6) Agrega los cambios con git add index.html;

7) Haz el commit con git commit -m "Cambiando el título de la página";

8) Ejecuta el comando git log y verifica el nuevo commit;

9) Cambia el título de la página a "Lista de cursos de DevOps de Alura";

10) Repite los pasos 6 y 7, para agregar un nuevo commit, cambiando el mensaje;

11) Repite el paso 8 para verificar el nuevo commit;

12) Ejecuta el comando git checkout master para volver a la línea de desarrollo master;

13) Ejecuta git log para verificar que los dos últimos commits no estén ahí. Comprueba que el contenido de tu archivo también ha vuelto a su estado original;

14) En la carpeta creada para representar el trabajo de otra persona en la clase anterior:

Ejecuta git checkout -b lista para crear una nueva branch, llamada lista y comienza a trabajar en ella;
Agrega el curso "Kubernetes" a la lista;
Repite los pasos 6 y 7 para agregar un nuevo commit, cambiando el mensaje;
Ejecuta el comando git checkout master para volver a la línea de desarrollo master;
15) Regresa a la carpeta que representa tu propio trabajo;

16) Cambia el nombre del curso de Docker a "Docker: Creando contenedores sin dolor de cabeza";

17) Repite los pasos 6 y 7 para agregar un nuevo commit, cambiando el mensaje;

18) Ejecuta el comando git merge titulo para traer el trabajo realizado en la branch título a la branch master;

19) Ejecuta el comando git log --graph para ver las líneas de desarrollo (branches);

20) Ejecuta git checkout titulo para trabajar en la branch llamada titulo;

21) Cambia el título para que tenga la palabra "Cursos" en mayúscula;

22) Repite los pasos 6 y 7 para agregar un nuevo commit, cambiando el mensaje;

23) Ejecuta el comando git checkout master para volver a la línea de desarrollo master;

24) Ejecuta el comando git rebase titulo;

25) Ejecuta el comando git log y verifica que el commit se agregó antes del commit realizado directamente en la branch master;

26) Ejecuta el comando git push servidorlocal master para enviar tus cambios al repositorio remoto que creamos en la última clase;

27) En la carpeta creada para representar el trabajo de otra persona en la clase anterior:

Ejecuta el comando git pull servidorlocal master para descargar los cambios que ya has realizado;
Ejecuta el comando git checkout lista para continuar trabajando en la lista de cursos;
Cambia el nombre del curso de Docker a "Curso de Docker: Creación de contenedores sin dolor de cabeza";
Repite los pasos 6 y 7 para agregar un nuevo commit, cambiando el mensaje;
Ejecuta el comando git checkout master para volver a la línea de desarrollo master;
Intenta juntar tu trabajo con git merge lista;
Observa que hay conflictos. Corrígelos, dejando solo la línea con el nombre correcto del curso;
Ejecuta el comando git add index.html para informar que los conflictos en este archivo se han solucionado;
Ejecuta el comando git commit para que Git complete el merge;
Ejecuta el comando git push servidorlocal master para enviar tus cambios;
28) Regresa a la carpeta que representa tu propio trabajo;

29) Cambia el nombre del curso de Vagrant a "Vagrant: Gerenciando máquinas virtuales";

30) Repita los pasos 6 y 7 para agregar un nuevo commit, cambiando el mensaje;

31) Intenta ejecutar el comando git push servidorlocal master. Observa la falla;

32) Ejecuta el comando git pull servidorlocal master para traer los cambios de la otra persona;

33) Ahora si, ejecuta el comando git push servidorlocal master para enviar los cambios.










Ha llegado el momento de que pongas en práctica lo visto en clase. Para hacer esto, sigue los pasos que se enumeran a continuación.

1) Cree una nueva carpeta en su computadora;

2) En la terminal (o Git Bash, en Windows) navega hasta la carpeta recién creada (use el comando cd para navegar entre carpetas);

3) Ejecuta el comando git init --bare;

4) Navega hasta la carpeta donde se encuentra tu proyecto;

5) Ejecuta el comando git remote add servidorlocal {ruta}. Reemplaza {ruta} con la ruta completa de la carpeta recién creada;

6) Crea una nueva carpeta en tu computadora, para representar el trabajo de otra persona;

7) En la terminal (o Git Bash, en Windows) navega hasta la carpeta recién creada;

8) Ejecuta el comando git clone {ruta} proyecto. Reemplaza {ruta} con la ruta completa a la carpeta que creamos en el primer paso;

9) Ten en cuenta que el repositorio clonado está vacío;

10) Accede a la carpeta del Proyecto y ejecuta el comando git remote rename origin servidorlocal para cambiar el nombre del repositorio local de la otra persona de "origin" a "servidorlocal";

11) Navega a la carpeta donde se encuentra tu proyecto original;

12) Ejecute el comando git push servidorlocal master para enviar tus cambios a tu servidor;

13) Navega hasta la carpeta creada en el paso 6;

14) Ejecuta el comando git pull servidorlocal master para descargar los cambios;

15) Abre tu navegador y vé a http://github.com/;

16) Crea una cuenta;

17) Crea un nuevo repositorio haciendo clic en el símbolo más (+) en la esquina superior derecha;

18) En la terminal (o Git Bash, en Windows) agrega el repositorio remoto recién creado a tu proyecto inicial (los comandos los muestra el propio GitHub);

19) Ejecuta git push origin master para enviar tus cambios al repositorio en GitHub.




HEAD: Estado actual de nuestro código, es decir, donde nos colocó Git
Working tree: Lugar donde los archivos realmente están siendo almacenados
index: Lugar donde Git almacena lo que será commiteado, es decir, la ubicación entre el working tree y el repositorio de Git en sí.

https://git-scm.com/book/es/v2/Fundamentos-de-Git-Guardando-cambios-en-el-Repositorio




















Qué son (y para qué sirven) los sistemas de control de versiones y cómo pueden ayudar a nuestro flujo de desarrollo
Nos ayudan a mantener un historial de cambios;
Nos ayudan a tener control sobre cada cambio en el código;
Nos ayudan a que un cambio de una persona no influya en el cambio realizado por otra;
Etc.